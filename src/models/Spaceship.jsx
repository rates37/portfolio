/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: Shophorn (https://sketchfab.com/shophorn)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/low-poly-spaceship-c3155a3dd5414e2188c6a49d4fdec3a3
Title: Spaceship
*/

import React, { useEffect, useRef, useState } from "react";
import { useGLTF } from "@react-three/drei";

// import spaceship from '../assets/3d/spaceship.glb'
import spaceship from "../assets/3d/low-poly_spaceship.glb";
import { useFrame } from "@react-three/fiber";
import * as THREE from 'three'

const Spaceship = ({ orbitCenter = [0, 0, 0], orbitRadius = 5, orbitSpeed = 1, ...props }) => {
  const { scene } = useGLTF(spaceship);
  const spaceShipRef = useRef();

  useEffect(() => {
    // TODO: do animations here, if you find a new model
  }, []);

  useFrame(({ clock }) => {
    if (spaceShipRef.current) {
      let [cx, cy, cz] = orbitCenter;
      cy += 8;
      const angle = clock.elapsedTime * orbitSpeed;
      const normalisedAngle = angle % (2*Math.PI);

      const x = cx + orbitRadius * Math.cos(angle);
      const z = cz + orbitRadius * Math.sin(-angle);
      spaceShipRef.current.position.set(x, cy, z);

      const dx = cx - spaceShipRef.current.position.x;
      const dz = cz - spaceShipRef.current.position.z;
      const direction = new THREE.Vector3(dx, 0, dz).normalize();

      const up = new THREE.Vector3(0, 1, 0);
      const left = new THREE.Vector3().crossVectors(up, direction).normalize();
      const finalUp = new THREE.Vector3().crossVectors(direction, left).normalize();

      const matrix = new THREE.Matrix4().makeBasis(left, finalUp, direction);
      spaceShipRef.current.rotation.setFromRotationMatrix(matrix);
      if (0 <= normalisedAngle && normalisedAngle <= Math.PI) {
        spaceShipRef.current.rotation.y -= Math.PI/2;
      } else {
        spaceShipRef.current.rotation.y += Math.PI/2;
      }
    }
  });
 

  return (
    <mesh {...props} ref={spaceShipRef}>
      <primitive object={scene} />
    </mesh>
  );
};

export default Spaceship;
